service: getportfolioreturn
# app and org for use with dashboard.serverless.com
#app: SmartInvest
#org: your-org-name

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  apiGateway:
    # restApiId: xxxxxxxxxx # REST API resource ID. Default is generated by the framework
    shouldStartNameWithService: true
    apiKeys:
      - ${self:service}-${opt:stage, self:provider.stage}
        #description: Api key description # Optional
    usagePlan:
      quota:
        limit: 5000
        offset: 2
        period: MONTH
      throttle:
        burstLimit: 100
        rateLimit: 30
    

# you can overwrite defaults here
#  stage: dev
  region: sa-east-1
  profile: serverless-admin
  # vpc:
  #   securityGroupIds:
  #     - sg-e3309b92
  #   subnetIds: 
  #     - subnet-f678f4bf
  #     - subnet-9b79f7fd
  #     - subnet-58910503
  environment:
    DAILY_RETURN_TABLE: smartinvest-dailyreturn-${opt:stage, self:provider.stage}
    ALPHA_API_KEY: ${ssm:/ALPHA_API_KEY~true}
    MONTHLY_TOTALS_TABLE: smartinvest-monthlyTotals-${opt:stage, self:provider.stage}
    PERCENTAGE_FEE: 0.0003
    PERCENTAGE_TAX: 0.00005

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: ["arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DAILY_RETURN_TABLE}",
                 "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MONTHLY_TOTALS_TABLE}" ]
      
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
package:
  # individually: true
#  include:
#    - include-me.js
#    - include-me-dir/**
 exclude:
   - package-lock.json
   - README.md
   - LICENSE
   - .babelrc
   - babel.config.js
   - node_modules/aws-sdk/**
   - main/test/**
   - getAssetReturn/test/**
   - currentQuote/test/**
   - images/**

functions:
  main:
    handler: main/main.handler
    events:
      - http:
          path: portfolioReturn
          method: post
          cors: true
          #require clients with API KEY
          private: true 
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: SmartInvestUsersApiGatewayAuthorizer  # or hard-code Authorizer ID
            # scopes: # Optional - List of Oauth2 scopes when type is COGNITO_USER_POOLS
            #   - myapp/myscope

  getAssetReturn:
    handler: getAssetReturn/getAssetReturn.handler
    timeout: 6
    events:
      - http:
          path: assetReturn
          method: post
          cors: true
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: SmartInvestUsersApiGatewayAuthorizer
  getTotalsPerMonth:
    handler: getTotalsPerMonth/getTotalsPerMonth.handler
    timeout: 3
    events:
      - http:
          path: totalsPerMonth
          method: post
          cors: true
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: SmartInvestUsersApiGatewayAuthorizer
  getPortfolioPosition:
    handler: portfolioPosition/getPortfolioPosition.handler
    events:
      - http:
          path: portfolioPosition
          method: get
          cors: true
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: SmartInvestUsersApiGatewayAuthorizer

  getCurrentQuote:
    handler: currentQuote/getCurrentQuote.handler
    events:
      - http:
          path: currentQuote
          method: get
          cors: true
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: SmartInvestUsersApiGatewayAuthorizer
resources:
  Resources:
    DailyReturnsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: assetCode
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: assetCode
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DAILY_RETURN_TABLE}
    MonthlyTotalsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.MONTHLY_TOTALS_TABLE}
    SmartInvestUsersApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: SmartInvestCognitoAuthorizer
        RestApiId: 
          Ref : "ApiGatewayRestApi" #default API gateway name
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - arn:aws:cognito-idp:${self:provider.region}:${ssm:/tf-aws_account_id~true}:userpool/${ssm:/tf-smartinvest_cognito_pool_id~true}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
